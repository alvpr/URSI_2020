/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(header_format_counter_dif.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(3baaeaa894b7af1f1b8dcc0e063d5d0c)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <TFMv5/header_format_counter_dif.h>
// pydoc.h is automatically generated in the build directory
#include <header_format_counter_dif_pydoc.h>

void bind_header_format_counter_dif(py::module& m)
{

    using header_format_counter_dif    = ::gr::TFMv5::header_format_counter_dif;


    py::class_<header_format_counter_dif, gr::digital::header_format_default,
        std::shared_ptr<header_format_counter_dif>>(m, "header_format_counter_dif", D(header_format_counter_dif))

        .def(py::init(&header_format_counter_dif::make),
           py::arg("access_code"),
           py::arg("threshold"),
           py::arg("bps"),
           D(header_format_counter_dif,make)
        )
        


        
        .def("bits_set",&header_format_counter_dif::bits_set,       
            py::arg("number"),
            D(header_format_counter_dif,bits_set)
        )


        
        .def("format",&header_format_counter_dif::format,       
            py::arg("nbytes_in"),
            py::arg("input"),
            py::arg("output"),
            py::arg("info"),
            D(header_format_counter_dif,format)
        )


        
        .def("header_nbits",&header_format_counter_dif::header_nbits,       
            D(header_format_counter_dif,header_nbits)
        )



        ;




}








